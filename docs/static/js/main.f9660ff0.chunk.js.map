{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAsB9C,OAEI,sBAAMC,SAfW,SAACC,GAElBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAQlB,SACI,uBACAO,KAAK,OACLC,MAAST,EACTU,SAxBkB,SAAEP,GACxBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAeE,EAAEU,OAAOJ,a,+BCNnBK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAETC,EAFS,iDAEwCC,UAAWH,GAFnD,+DAGKI,MAAOF,GAHZ,cAGTG,EAHS,gBAIQA,EAAKC,OAJb,uBAIPC,EAJO,EAIPA,KAEFC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV3B,kBAcRM,GAdQ,4CAAH,sDCDPO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIlC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCJCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiCxC,OA1BAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHC,YAAY,WACR9B,QAAQC,IAAI4B,GAEhBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGV,UAEZ,CAACpB,IAWGqB,EDvB0BM,CAAc3B,GAAlCa,EATwB,EAS7BN,KAAaa,EATgB,EAShBA,QAqBrB,OAlBAxB,QAAQC,IAAIuB,GAoBR,yCAEA,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAKCoB,GAAW,mBAAGJ,UAAU,oCAAb,wBAGZ,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAM,SAAAC,GAAG,OACZ,cAAC,EAAD,eAGKA,GAFCA,EAAIC,aE/CrBiB,EAAe,WAAM,MAIM5C,mBAAS,CAAC,cAJhB,mBAIvB6C,EAJuB,KAIX9C,EAJW,KAc9B,OACI,qCACA,+CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQ8C,EAAWpB,KAAK,SAAAT,GAAQ,OAEnB,aADA,CACC,EAAD,CAEAA,SAAWA,GADLA,YClBZ8B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCARO,EAAUC,SAASC,cAAc,SAEvCC,IAASC,OAEL,cAAC,EAAD,IACFJ,GAMFR,M","file":"static/js/main.f9660ff0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        console.log(e.target.value);\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        //esto es para prevenir el comportamiento por defecto del formulario\n        e.preventDefault();\n\n        //trim() se utiliza xa borrar los epacios que pueda traer el valor.\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( cats => [ inputValue, ...cats ]); //en función del orden pintará primero el valor que se introduca en el input\n            setInputValue('');\n\n        }\n\n    }\n\n    return (\n      \n        <form onSubmit={ handleSubmit }>\n            <input \n            type=\"text\"\n            value= { inputValue }\n            onChange={ handleInputChange }\n            />\n        </form>\n    \n    )\n\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};\n","\n\n\nexport const getGifs = async ( category ) => {\n        //utilizamos encodeURI para eliminar espacios que pueda traer las category.\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=83Lixw5GLJuhMMk8saqUwRbnm1pNU5VM`;\n        const resp =  await fetch( url );\n        const { data } = await resp.json();\n\n        const gifs = data.map ( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url \n            }\n        })\n\n        return gifs;\n    }","import React from 'react'\n\nexport const GifGridItem = ( { title, url} ) => {\n\n    //console.log({id, title, url});\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    //SIN desctructurar\n    //const state = useFetchGifs();\n\n    //console.log(state);\n\n    //desectruturado\n    //Cnd queremos asignarle otro nombre a data,lo hacemos con : seguido el nuevo nombre.\n    const { data:images, loading } = useFetchGifs( category );\n\n    //console.log(data);\n    console.log(loading);\n\n    \n/*\n    //const [images, setImages] = useState([]);\n\n    useEffect( () => {\n        getGifs( category )\n        .then( setImages );\n\n        //Igual que lo de arriba pero más largo.\n        //.then( imgs => setImages( imgs ));\n\n    }, [ category ]) //si este array (arreglo de dependencía) está vacio sólo se va disparar el useEffect 1 vez.\n    //se ejecuta la función getGifs cnd el compponenete sea renderizado la primear vez.\n    //de lo contrario (le metemos category) le decimos que cada vez que cambie de category ejecute y renderize.\n    \n    */\n    return (\n\n        <> {/* este es el FRAGMENT */}\n\n        <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\n\n       {/* { loading ? 'Cargando...' : 'Datos cargados'} */}\n\n        {/*  Se utiliza && puesto que es una cindición que SÓLO evalua si es true  */}\n       { loading && <p className=\"animate__animated animate__fadeIn\">Loading...</p>}\n\n  \n        <div className=\"card-grid\">\n                {\n                    images.map ( img => (\n                        <GifGridItem \n                        key={ img.id }\n                        //img={ img } \n                        { ...img }\n                        />\n                    ))\n\n                    //desestructurado\n                    //images.map ({ id, title}) => (\n                        //<li key={ id }> { title } </li>\n                    //))\n\n                    //SIN DESECTRUCTURAR\n                    //  images.map ( img => (\n                       // <li key={ img.id }> { img.title } </li>\n                    //))\n                }\n            \n            \n        </div>\n   \n\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({ \n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n\n                setTimeout( () => {\n                    console.log(imgs);\n\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n\n                }, 3000);\n            })\n    }, [category]);\n\n    /*\n    setTimeout( () => {\n        setState({\n            data: [1,2,3,4,5,6,7],\n            loading: false\n        })\n    }, 3000);\n    */\n\n    return state; // { data:[], loading: true };\n\n}","import React , { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    //const handleAdd = () => {\n\n        //dos manera de usar el useState para agregar un nuevo valor aun array.\n        //setCategories([...categories, 'HunterXHunter']);\n        //setCategories( cats => [...cats, 'HunterXHunter']);\n        \n    //}\n\n    return (\n        <>\n        <h2>GiftExpertApp</h2>\n        <AddCategory setCategories={ setCategories } />\n        <hr></hr>\n\n\n        <ol>\n            {\n                categories.map( category => (\n                     //<li key={ category }> { category } </li>\n                     <GifGrid \n                     key={ category }\n                     category={ category }\n                     />\n                ))\n            }\n        </ol>\n        </>\n    );\n};\n\n//export default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nconst divRoot = document.querySelector(\"#root\");\n\nReactDOM.render(\n    //<App />,\n    <GifExpertApp />,\n  divRoot\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}